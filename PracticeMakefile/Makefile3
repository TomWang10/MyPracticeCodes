#新增加clean选项删除不需要的目标文件，增加一个install选项来将编译成功的应用程序安装到另一个目录下
all: myapp

# 指定编译器
CC = g++

# 设置安装在哪一个目录
INSTDIR = /usr/local/bin

# 设置引用的头文件目录
INCLUDE = .

# 设置调试模式的一些选项
CFLAGS = -g -Wall -ansi

# 设置发布模式的一些选项
#CFLAGS = -O -Wall -ansi

myapp: main.o 2.o 3.o
	$(CC) -o myapp main.o 2.o 3.o

main.o: main.cc a.h
	$(CC) -I$(INCLUDE) $(CFLAGS) -c main.cc

2.o: 2.cc a.h b.h
	$(CC) -I$(INCLUDE) $(CFLAGS) -c 2.cc

3.o: 3.cc b.h c.h
	$(CC) -I$(INCLUDE) $(CFLAGS) -c 3.cc

#clean 没有给clean目标定义任何的依赖关系,所以该目标总被认为是过时的,执行make命令时,如果指定目标为clean，对应的规则(-rm main.o 2.o 3.o)总是被执行
clean:
	# 减号的含义就是让make命令忽略rm命令的执行结果,就是说如果目标文件不存在,clean也会执行成功
	-rm main.o 2.o 3.o

#目标install依赖于myapp，所以make命令知道它必须先创建myapp,然后才执行其他命令.
#由于安装myapp要分几个shell命令完成，并且make命令在执行规则时会针对每一个规则调用一个新的shell.所以必须在上面每行代码的结尾加上一个反斜杠.让所有的命令做为一个整体传给一个shell执行。
#这个命令以@符号开关，表示在执行这些规则之前不会在标准输出上显示命令本身
install: myapp
	@if [ -d $(INSTDIR) ]; \
		then \
		cp myapp $(INSTDIR); \
		chmod a+x $(INSTDIR)/myapp;\
		chmod og-w $(INSTDIR)/myapp;\
		echo "Installed in $(INSTDIR)";\
	else \
		echo "Sorry, $(INSTDIR) does not exist"; \
	fi
